#!/usr/bin/python
# -*- coding: utf-8 -*-


def print_abasic_cmd():
    basic_cmd = """
########################################### 基础知识 ################################

机器指令： 机器指令（Machine Instruction），也叫机器码指令、机器语言，计算机CPU能够直接识别和执行的最基本
指令，由一串二进制代码组成。每条机器指令都对应CPU要执行的一种基本操作，比如：
	数据的传输（如从内存读数据到寄存器）
	算术运算（如加减乘除）
	逻辑运算（如与、或、非）
	控制跳转（如条件跳转、函数调用）

汇编语言的产生： 写程序不方便
汇编语言的组成：
	汇编指令：机器码的助记符，有对应的机器码。
	伪指令：没有对应的机器码，由编译器执行，计算机并不执行。
	其他符号：如+、-、*、/等，由编译器识别，没有对应的机器码。
指令&数据： 指令和数据是应用上的概念。在内存或磁盘上，指令和数据没有任何区别，都是二进制信息。

cpu对存储器的读写： 通过操作存储芯片
	存储单元的地址（地址信息）
	器件的选择，读或写的命令（控制信息）
	读或写的数据（数据信息）

地址总线： 64位CPU上通常40~52条
数据总线： 64位CPU一般意味着数据总线为64位，即一次可以并行传输64位（8字节）数据
控制总线： 64位CPU控制总线的数量不固定，取决于CPU设计，一般20~40条左右
	读/写（RD/WR）
	中断请求（IRQ）
	内存请求（MEMREQ）
	I/O请求
	时钟
	复位
	
各类存储器芯片：
		|||	RAM（内存）
                |||	  |||
                |||=======================
		|||
		|||
		|||	ROM（bios）
		|||	  |||
		|||=======================
		|||
|-----|		|||			      |------|
| cpu |=========|||	RAM（显存）-----------|显示器|
|-----|    总线 |||	  |||		      |------|		
                |||=======================
                |||
		|||	RAM（内存扩展）
		|||	  |||
		|||=======================
		|||
		|||
		|||	RAM（网卡）
		|||	  |||
		|||=======================
		|||
		|||
		|||其他器件
    """
    print(basic_cmd)

def print_assembly_cmd():
    assembly_cmd = """

########################################### 简介 ################################
汇编语言是一种底层编程语言，直接操作计算机硬件。以下是一些常用的汇编指令，主要基于x86架构：


########################################### 常用指令 ##################################

数据传输指令
	MOV - 将数据从一个位置传送到另一个位置。例如：MOV AX, BX将BX寄存器中的值复制到AX寄存器。
	PUSH - 将数据压入堆栈。例如：PUSH AX将AX寄存器中的值压入堆栈。
	POP - 从堆栈中弹出数据。例如：POP AX从堆栈中弹出一个值并存储在AX寄存器中。
	LEA - 获取有效地址。例如：LEA AX, [BX+SI]将BX+SI的内存地址加载到AX中。
	
算术运算指令
	ADD - 加法运算。例如：ADD AX, BX将AX和BX中的值相加，结果存储在AX中。
	SUB - 减法运算。例如：SUB AX, BX将BX从AX中减去，结果存储在AX中。
	MUL - 无符号乘法。例如：MUL BX用AX中的值乘以BX中的值，结果存储在AX和DX中。
	DIV - 无符号除法。例如：DIV BX用AX中的值除以BX，商存储在AX中，余数存储在DX中。
	INC - 自增运算。例如：INC AX将AX中的值加1。
	DEC - 自减运算。例如：DEC AX将AX中的值减1。
	
逻辑运算指令
	AND - 位与操作。例如：AND AX, BX对AX和BX中的值进行位与操作，结果存储在AX中。
	OR - 位或操作。例如：OR AX, BX对AX和BX中的值进行位或操作，结果存储在AX中。
	XOR - 位异或操作。例如：XOR AX, BX对AX和BX中的值进行位异或操作，结果存储在AX中。
	NOT - 位非操作。例如：NOT AX对AX中的值进行位取反。
	
控制转移指令
	JMP - 无条件跳转。例如：JMP LABEL跳转到LABEL处执行代码。
	JE/JZ - 如果相等或零，则跳转。例如：JE LABEL当上一次计算结果为零时跳转到LABEL。
	JNE/JNZ - 如果不相等或不为零，则跳转。例如：JNE LABEL当上一次计算结果不为零时跳转到LABEL。
	CALL - 调用子程序。例如：CALL SUBROUTINE跳转到子程序SUBROUTINE执行，并在完成后返回调用点。
	RET - 从子程序返回。例如：RET从子程序返回到调用点。
	
数据比较指令
	CMP - 比较两个操作数。例如：CMP AX, BX比较AX和BX的值，并设置标志寄存器。
	TEST - 测试操作数。例如：TEST AX, BX对AX和BX进行位与操作，但不存储结果，仅设置标志寄存器。


########################################### 备注 ##################################

这些指令是x86汇编语言中的基础，掌握它们有助于理解底层计算机操作和编写高效的低级代码。
   """
    print(assembly_cmd) 







def print_axxx_cmd():
    xxx_cmd = """
    """
    print(xxx_cmd)


