#!/usr/bin/python
# -*- coding: utf-8 -*-

def print_cpu_register_cmd():
    cpu_register_cmd = """

CPU 中的寄存器是处理器内部速度最快的存储单元，用于暂存数据、地址和指令控制信息。寄存器的种类和数量因
架构（如 x86、x86-64、ARM 等）不同而略有差异。下面以 x86 和 x86-64 架构为主来说明常见寄存器类型

############################## 通用寄存器（General-Purpose Registers）######################################
名称		32 位	64 位	用途简述（可变通用）
累加器		EAX		RAX		用于算术运算、函数返回值等
基址寄存器	EBX		RBX		用作基址地址，也可用于通用数据操作
计数器		ECX		RCX		用于循环计数，rep 指令中的计数寄存器
数据寄存器	EDX		RDX		用于乘除法运算，函数返回值（64 位系统）
源索引		ESI		RSI		用于字符串操作、函数调用的参数
目标索引	EDI		RDI		用于字符串操作、函数调用的参数
栈指针		ESP		RSP		指向栈顶
基指针		EBP		RBP		指向当前栈帧底部，函数调用/调试用
新增（64 位）	无		R8~R15	64 位架构新增的 8 个通用寄存器

############################## 段寄存器（Segment Registers，主要用于实模式） ######################################
名称		用途说明
CS		代码段（Code Segment）
DS		数据段（Data Segment）
SS		堆栈段（Stack Segment）
ES		扩展数据段（Extra Segment）
FS		额外段寄存器，线程局部存储等用途
GS		同上，多用于操作系统特殊用途

############################## 指令指针寄存器（Instruction Pointer） ######################################
名称		说明
EIP		32 位系统中的指令指针
RIP		64 位系统中的指令指针
说明：存储下一条要执行的指令地址。

############################## 标志寄存器（Flags Register） ######################################
名称	描述
EFLAGS	32 位状态控制寄存器，包含多种标志位
RFLAGS	64 位版本，控制和反映程序运行状态

常见标志位（部分）：
	ZF（Zero Flag）：结果是否为零
	CF（Carry Flag）：是否产生进位/借位
	SF（Sign Flag）：符号位
	OF（Overflow Flag）：溢出标志
	IF（Interrupt Flag）：是否允许中断

############################## 控制寄存器（Control Registers，特权模式使用） ######################################
主要用于内存管理、分页机制等（主要是 x86）：
	CR0：启用保护模式等
	CR2：页面错误线性地址
	CR3：页目录基址
	CR4：启用分页扩展、SMEP 等

############################## 调试寄存器（DR0~DR7） ######################################
用于硬件调试断点设置。

############################## 浮点与SIMD寄存器（高级寄存器） ######################################
FPU（x87）寄存器栈：ST(0)~ST(7)
SSE/AVX：XMM0XMM15、YMM0YMM15、ZMM0~ZMM31（AVX-512）


############################## 查看寄存器属性 ######################################

在 Linux 中，普通用户不能直接查看 CPU 寄存器的内容或属性，因为寄存器是 CPU 内部硬件资源，通常只有在以下几种情况或工具下可以间接查看或使用：
	一、使用 gdb 调试器查看寄存器（最常用方法）
		gdb ./your_program
		(gdb) start        	  # 启动调试
		(gdb) info registers  # 查看所有通用寄存器
	二、使用 perf, lscpu, cpuid 等工具查看CPU支持哪些寄存器特性（如SSE、AVX）
		cpuid | less	# 提供更详细的寄存器扩展支持信息
   """
    print(cpu_register_cmd) 

